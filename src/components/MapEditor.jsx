import React, { useRef, useEffect, useState } from 'react';
import styled from 'styled-components';
import { MapContainer, TileLayer, Marker, Popup, Polyline, useMapEvents } from 'react-leaflet';
import L from 'leaflet';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ Leaflet
import 'leaflet/dist/leaflet.css';

// –§–∏–∫—Å–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–∫–æ–Ω–∫–∞–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

const MapContainerStyled = styled.div`
  width: 100%;
  height: 500px;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  position: relative;
  overflow: hidden;
  margin-bottom: 20px;
`;



const MapControls = styled.div`
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
  flex-wrap: wrap;
  background: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
`;

const ControlButton = styled.button`
  padding: 10px 16px;
  border: 2px solid #667eea;
  background: white;
  color: #667eea;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;

  &:hover {
    background: #667eea;
    color: white;
  }

  &.active {
    background: #667eea;
    color: white;
  }

  &.danger {
    border-color: #dc3545;
    color: #dc3545;
    &:hover {
      background: #dc3545;
      color: white;
    }
  }

  &.success {
    border-color: #28a745;
    color: #28a745;
    &:hover {
      background: #28a745;
      color: white;
    }
  }
`;

const MapInfo = styled.div`
  background: #e9ecef;
  padding: 15px;
  border-radius: 8px;
  font-size: 14px;
  color: #495057;
  margin-bottom: 15px;
  line-height: 1.5;
`;

const Instructions = styled.div`
  background: #fff3cd;
  border: 1px solid #ffeaa7;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
  font-size: 14px;
  color: #856404;
`;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
const MapClickHandler = ({ onMapClick, mode }) => {
  useMapEvents({
    click: (e) => {
      if (mode === 'add') {
        onMapClick(e.latlng);
      }
    },
  });
  return null;
};

const MapEditor = ({ points = [], onPointsChange, questName }) => {
  const [mode, setMode] = useState('view'); // view, add, edit, delete
  const [mapCenter, setMapCenter] = useState([55.7558, 37.6176]); // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [mapZoom, setMapZoom] = useState(13);

  console.log('MapEditor –ø–æ–ª—É—á–∏–ª —Ç–æ—á–∫–∏:', points);
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:', points.length);
  console.log('–¢–∏–ø —Ç–æ—á–µ–∫:', typeof points);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ—á–µ–∫
  useEffect(() => {
    console.log('useEffect MapEditor - —Ç–æ—á–∫–∏:', points);
    console.log('–ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞:', points[0]);
    
    const validPoints = points.filter(p => p.point && typeof p.point.latitude === 'number' && typeof p.point.longitude === 'number');
    
    if (validPoints.length > 0) {
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
      setMapCenter([validPoints[0].point.latitude, validPoints[0].point.longitude]);
      setMapZoom(15);
    }
  }, [points]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
  const handleMapClick = (latlng) => {
    if (mode === 'add') {
      const newPoint = {
        point: {
          id: `point_${Date.now()}`,
          name: `–¢–æ—á–∫–∞ ${points.length + 1}`,
          latitude: latlng.lat,
          longitude: latlng.lng,
          photo: null,
          description: '–ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞'
        },
        order: points.length + 1
      };

      const newPoints = [...points, newPoint];
      onPointsChange(newPoints);
      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞: ${latlng.lat.toFixed(6)}, ${latlng.lng.toFixed(6)}`);
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
  const addIntermediatePoint = () => {
    const validPoints = points.filter(p => p.point && typeof p.point.latitude === 'number' && typeof p.point.longitude === 'number');
    
    if (validPoints.length < 2) {
      alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π!');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–æ–π
    const firstPoint = validPoints[0].point;
    const lastPoint = validPoints[validPoints.length - 1].point;
    
    const midLat = (firstPoint.latitude + lastPoint.latitude) / 2;
    const midLng = (firstPoint.longitude + lastPoint.longitude) / 2;

    const newPoint = {
      point: {
        id: `intermediate_${Date.now()}`,
        name: `–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ ${points.length + 1}`,
        latitude: midLat,
        longitude: midLng,
        photo: null,
        description: '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞'
      },
      order: points.length + 1
    };

    const newPoints = [...points, newPoint];
    onPointsChange(newPoints);
  };

  // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
  const removeLastIntermediate = () => {
    const validPoints = points.filter(p => p.point && typeof p.point.latitude === 'number' && typeof p.point.longitude === 'number');
    
    if (validPoints.length <= 2) {
      alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞!');
      return;
    }

    const newPoints = points.slice(0, -1);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    newPoints.forEach((p, index) => {
      p.order = index + 1;
    });
    onPointsChange(newPoints);
  };

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  const optimizeRoute = () => {
    const validPoints = points.filter(p => p.point && typeof p.point.latitude === 'number' && typeof p.point.longitude === 'number');
    
    if (validPoints.length <= 2) {
      alert('–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞!');
      return;
    }

    // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    const firstPoint = validPoints[0];
    const lastPoint = validPoints[validPoints.length - 1];
    const intermediatePoints = validPoints.slice(1, -1);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π
    intermediatePoints.sort((a, b) => {
      const distA = Math.sqrt(
        Math.pow(a.point.latitude - firstPoint.point.latitude, 2) +
        Math.pow(a.point.longitude - firstPoint.point.longitude, 2)
      );
      const distB = Math.sqrt(
        Math.pow(b.point.latitude - firstPoint.point.latitude, 2) +
        Math.pow(b.point.longitude - firstPoint.point.longitude, 2)
      );
      return distA - distB;
    });

    const newPoints = [firstPoint, ...intermediatePoints, lastPoint];
    newPoints.forEach((p, index) => {
      p.order = index + 1;
    });

    onPointsChange(newPoints);
    alert('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!');
  };

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
  const createCustomIcon = (color) => {
    return L.divIcon({
      className: 'custom-marker',
      html: `<div style="
        background-color: ${color};
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 12px;
      "></div>`,
      iconSize: [20, 20],
      iconAnchor: [10, 10],
    });
  };

  const validPoints = points.filter(p => p.point && typeof p.point.latitude === 'number' && typeof p.point.longitude === 'number');

  return (
    <div>
      <MapInfo>
        <strong>üó∫Ô∏è –†–µ–¥–∞–∫—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:</strong> {questName} | 
        –†–µ–∂–∏–º: {mode === 'view' ? '–ü—Ä–æ—Å–º–æ—Ç—Ä' : mode === 'add' ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫' : mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–£–¥–∞–ª–µ–Ω–∏–µ'} | 
        –¢–æ—á–æ–∫: {points.length} (–≤–∞–ª–∏–¥–Ω—ã—Ö: {points.filter(p => p.point && typeof p.point.latitude === 'number' && typeof p.point.longitude === 'number').length})
      </MapInfo>

      <Instructions>
        <strong>üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong><br/>
        ‚Ä¢ <strong>–ó–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä</strong> - –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞<br/>
        ‚Ä¢ <strong>–°–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã</strong> - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏<br/>
        ‚Ä¢ <strong>–ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä</strong> - –∫–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞<br/>
        ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫" –∏ –∫–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ<br/>
        ‚Ä¢ –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ "üß™ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏"<br/>
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–º
      </Instructions>
      
      <MapControls>
        <ControlButton 
          className={mode === 'view' ? 'active' : ''} 
          onClick={() => setMode('view')}
        >
          üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
        </ControlButton>
        <ControlButton 
          className={mode === 'add' ? 'active' : ''} 
          onClick={() => setMode('add')}
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É
        </ControlButton>
        <ControlButton 
          className="success"
          onClick={addIntermediatePoint}
        >
          üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é
        </ControlButton>
        <ControlButton 
          className="danger"
          onClick={removeLastIntermediate}
        >
          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é
        </ControlButton>
        <ControlButton 
          onClick={optimizeRoute}
        >
          üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
        </ControlButton>
        <ControlButton 
          className="success"
          onClick={() => {
            if (points.length === 0) {
              // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ú–æ—Å–∫–≤—ã
              const testPoints = [
                {
                  point: {
                    id: 'start_1',
                    name: '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞',
                    latitude: 55.7558,
                    longitude: 37.6176,
                    photo: null,
                    description: '–ù–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞'
                  },
                  order: 1
                },
                {
                  point: {
                    id: 'end_1',
                    name: '–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞',
                    latitude: 55.7287,
                    longitude: 37.6014,
                    photo: null,
                    description: '–ö–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞'
                  },
                  order: 2
                }
              ];
              onPointsChange(testPoints);
              alert('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏!');
            } else {
              alert('–¢–æ—á–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ –º–∞—Ä—à—Ä—É—Ç–µ!');
            }
          }}
        >
          üß™ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
        </ControlButton>
      </MapControls>

      <MapContainerStyled>
        <MapContainer
          center={mapCenter}
          zoom={mapZoom}
          style={{ width: '100%', height: '100%' }}
          scrollWheelZoom={true}
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution="&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
          />
          
          {/* –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ */}
          <MapClickHandler onMapClick={handleMapClick} mode={mode} />
          
          {/* –ú–∞—Ä–∫–µ—Ä—ã —Ç–æ—á–µ–∫ */}
          {validPoints.map((pointData, index) => {
            const color = index === 0 ? '#28a745' : index === validPoints.length - 1 ? '#dc3545' : '#667eea';
            const icon = createCustomIcon(color);
            
            return (
              <Marker
                key={pointData.point.id}
                position={[pointData.point.latitude, pointData.point.longitude]}
                icon={icon}
              >
                <Popup>
                  <div style={{ maxWidth: 220 }}>
                    <h3 style={{ margin: '0 0 5px 0', fontSize: 16 }}>
                      {pointData.point.name}
                    </h3>
                    <p style={{ margin: 0, fontSize: 14, color: '#666' }}>
                      {pointData.point.description}
                    </p>
                    <div style={{ fontSize: 12, color: '#999', marginTop: 5 }}>
                      –ü–æ—Ä—è–¥–æ–∫: {pointData.order}
                    </div>
                    <div style={{ fontSize: 12, color: '#999' }}>
                      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {pointData.point.latitude.toFixed(6)}, {pointData.point.longitude.toFixed(6)}
                    </div>
                  </div>
                </Popup>
              </Marker>
            );
          })}
          
          {/* –õ–∏–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ */}
          {validPoints.length > 1 && (
            <Polyline
              positions={validPoints.map(({ point }) => [point.latitude, point.longitude])}
              pathOptions={{ color: '#2196F3', weight: 3, opacity: 0.8 }}
            />
          )}
        </MapContainer>
      </MapContainerStyled>

      <div style={{ marginTop: '15px', fontSize: '12px', color: '#666' }}>
        <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫" –∏ –∫–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞.
      </div>
    </div>
  );
};

export default MapEditor; 