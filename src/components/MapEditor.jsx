import React, { useRef, useEffect, useState } from 'react';
import styled from 'styled-components';

const MapContainer = styled.div`
  width: 100%;
  height: 500px;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  position: relative;
  overflow: hidden;
  margin-bottom: 20px;
`;

const MapFrame = styled.iframe`
  width: 100%;
  height: 100%;
  border: none;
`;

const MapOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  z-index: 10;
`;

const MapControls = styled.div`
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
  flex-wrap: wrap;
  background: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
`;

const ControlButton = styled.button`
  padding: 10px 16px;
  border: 2px solid #667eea;
  background: white;
  color: #667eea;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;

  &:hover {
    background: #667eea;
    color: white;
  }

  &.active {
    background: #667eea;
    color: white;
  }

  &.danger {
    border-color: #dc3545;
    color: #dc3545;
    &:hover {
      background: #dc3545;
      color: white;
    }
  }

  &.success {
    border-color: #28a745;
    color: #28a745;
    &:hover {
      background: #28a745;
      color: white;
    }
  }
`;

const MapInfo = styled.div`
  background: #e9ecef;
  padding: 15px;
  border-radius: 8px;
  font-size: 14px;
  color: #495057;
  margin-bottom: 15px;
  line-height: 1.5;
`;

const Instructions = styled.div`
  background: #fff3cd;
  border: 1px solid #ffeaa7;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 15px;
  font-size: 14px;
  color: #856404;
`;

const MapEditor = ({ points = [], onPointsChange, questName }) => {
  const [mode, setMode] = useState('view'); // view, add, edit, delete
  const [mapUrl, setMapUrl] = useState('');
  const [centerLat, setCenterLat] = useState(55.7558); // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [centerLng, setCenterLng] = useState(37.6176);
  const [zoom, setZoom] = useState(13);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞—Ä—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
  useEffect(() => {
    if (points.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setMapUrl(`https://www.openstreetmap.org/export/embed.html?bbox=${centerLng-0.01},${centerLat-0.01},${centerLng+0.01},${centerLat+0.01}&layer=mapnik&marker=${centerLat},${centerLng}`);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
    const lats = points.map(p => p.point.latitude);
    const lngs = points.map(p => p.point.longitude);
    const minLat = Math.min(...lats);
    const maxLat = Math.max(...lats);
    const minLng = Math.min(...lngs);
    const maxLng = Math.max(...lngs);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    const latPadding = (maxLat - minLat) * 0.1;
    const lngPadding = (maxLng - minLng) * 0.1;

    const bbox = `${minLng - lngPadding},${minLat - latPadding},${maxLng + lngPadding},${maxLat + latPadding}`;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
    const markers = points.map((pointData, index) => {
      const color = index === 0 ? 'green' : index === points.length - 1 ? 'red' : 'blue';
      return `&marker=${pointData.point.latitude},${pointData.point.longitude}`;
    }).join('');

    setMapUrl(`https://www.openstreetmap.org/export/embed.html?bbox=${bbox}&layer=mapnik${markers}`);
  }, [points, centerLat, centerLng]);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
  const addIntermediatePoint = () => {
    if (points.length < 2) {
      alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π!');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–æ–π
    const firstPoint = points[0].point;
    const lastPoint = points[points.length - 1].point;
    
    const midLat = (firstPoint.latitude + lastPoint.latitude) / 2;
    const midLng = (firstPoint.longitude + lastPoint.longitude) / 2;

    const newPoint = {
      point: {
        id: `intermediate_${Date.now()}`,
        name: `–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ ${points.length}`,
        latitude: midLat,
        longitude: midLng,
        photo: null,
        description: '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞'
      },
      order: points.length + 1
    };

    const newPoints = [...points, newPoint];
    onPointsChange(newPoints);
  };

  // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
  const removeLastIntermediate = () => {
    if (points.length <= 2) {
      alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞!');
      return;
    }

    const newPoints = points.slice(0, -1);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    newPoints.forEach((p, index) => {
      p.order = index + 1;
    });
    onPointsChange(newPoints);
  };

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  const optimizeRoute = () => {
    if (points.length <= 2) {
      alert('–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞!');
      return;
    }

    // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    const firstPoint = points[0];
    const lastPoint = points[points.length - 1];
    const intermediatePoints = points.slice(1, -1);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π
    intermediatePoints.sort((a, b) => {
      const distA = Math.sqrt(
        Math.pow(a.point.latitude - firstPoint.point.latitude, 2) +
        Math.pow(a.point.longitude - firstPoint.point.longitude, 2)
      );
      const distB = Math.sqrt(
        Math.pow(b.point.latitude - firstPoint.point.latitude, 2) +
        Math.pow(b.point.longitude - firstPoint.point.longitude, 2)
      );
      return distA - distB;
    });

    const newPoints = [firstPoint, ...intermediatePoints, lastPoint];
    newPoints.forEach((p, index) => {
      p.order = index + 1;
    });

    onPointsChange(newPoints);
    alert('‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!');
  };

  return (
    <div>
      <MapInfo>
        <strong>üó∫Ô∏è –†–µ–¥–∞–∫—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞:</strong> {questName} | 
        –†–µ–∂–∏–º: {mode === 'view' ? '–ü—Ä–æ—Å–º–æ—Ç—Ä' : mode === 'add' ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫' : mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–£–¥–∞–ª–µ–Ω–∏–µ'} | 
        –¢–æ—á–æ–∫: {points.length}
      </MapInfo>

      <Instructions>
        <strong>üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong><br/>
        ‚Ä¢ <strong>–ó–µ–ª–µ–Ω—ã–π –º–∞—Ä–∫–µ—Ä</strong> - –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞<br/>
        ‚Ä¢ <strong>–°–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã</strong> - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏<br/>
        ‚Ä¢ <strong>–ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä</strong> - –∫–æ–Ω–µ—Ü –º–∞—Ä—à—Ä—É—Ç–∞<br/>
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–º
      </Instructions>
      
      <MapControls>
        <ControlButton 
          className={mode === 'view' ? 'active' : ''} 
          onClick={() => setMode('view')}
        >
          üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
        </ControlButton>
        <ControlButton 
          className={mode === 'add' ? 'active' : ''} 
          onClick={() => setMode('add')}
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É
        </ControlButton>
        <ControlButton 
          className="success"
          onClick={addIntermediatePoint}
        >
          üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é
        </ControlButton>
        <ControlButton 
          className="danger"
          onClick={removeLastIntermediate}
        >
          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é
        </ControlButton>
        <ControlButton 
          onClick={optimizeRoute}
        >
          üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
        </ControlButton>
      </MapControls>

      <MapContainer>
        <MapFrame
          src={mapUrl}
          title="–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞"
        />
        <MapOverlay />
      </MapContainer>

      <div style={{ marginTop: '15px', fontSize: '12px', color: '#666' }}>
        <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –º–∞—Ä—à—Ä—É—Ç–µ. 
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
      </div>
    </div>
  );
};

export default MapEditor; 